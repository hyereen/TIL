# -*- coding: utf-8 -*-
"""9205.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_A7L6bo9iv7LAR8bv1MnkpwOc78hS_x7
"""

# 9205
# https://www.acmicpc.net/problem/9205

# bfs
import sys
from collections import deque

input = sys.stdin.readline

def bfs(hx, hy, fx, fy):
  queue = deque()
  queue.append((hx, hy))

  while queue:
    x, y = queue.popleft()

    if abs(x - fx) + abs(y - fy) <= 1000:
      print("happy")
      return

    for i in range(n):
      if not visited[i]:
        cx, cy = conv[i]
        if abs(x - cx) + abs(y - cy) <= 1000:
          queue.append((cx, cy))
          visited[i] = 1
  
  print("sad")
  return

t = int(input())

for i in range(t):
  n = int(input())
  hx, hy = map(int, input().split())
  conv = []
  for j in range(n):
    cx, cy = map(int, input().split())
    conv.append((cx, cy))
  fx, fy = map(int, input().split())
  visited = [0 for i in range(n+1)] # home 제외
  bfs(hx, hy, fx, fy)

# bfs를 전혀 안쓴 예제만 맞는 코드..
t = int(input())

result = []

for j in range(t):
  xy_list = []
  dist_list = []
  # 편의점 수 입력받기 
  n = int(input())
  # 집, 편의점들, 페스티벌 좌표 입력받기
  for i in range(2+n):
    x, y = map(int, input().split())
    xy_list.append((x, y))

  # 각 좌표들 간의 거리 차이 구하기
  for i in range(2+n):
    if i == 0:
      continue
    x, y = xy_list[i]
    z, w = xy_list[i-1]
    dist = (x-z) + (y-w)
    dist_list.append(dist)

  # happy, sad 판별하기
  for i in range(len(dist_list)):
    if dist_list[i] > 1000:
      result.append("sad")
      break
    else:
      if i == (len(dist_list)-1):
        result.append("happy")

for i in result:
  print(i)

# 7%에서 틀려서 반례를 찾아봄
# https://www.acmicpc.net/board/view/37653
# https://www.acmicpc.net/board/view/33032