# -*- coding: utf-8 -*-
"""1600.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DOYz8M6w6AwkZNCeaGJhdQN-6_0zuKw_
"""

# 1600
# https://www.acmicpc.net/problem/1600

from collections import deque
k = int(input())

w, h = map(int, input().split())

graph = []

for i in range(h):
  line = list(map(int, input().split()))
  graph.append(line)

visited = [[[0 for i in range(31)] for i in range(w)] for i in range(h)]

# 상 하 좌 우
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]
# 말로 이동할 수 있는 위치 낮은 행부터
dx1 = [-2, -1, 1, 2, 2, 1, -1, -2]
dy1 = [1, 2, 2, 1, -1, -2, -2, -1]

def bfs():
  queue = deque()
  queue.append((0,0, k)) # 항상 시작점

  while queue:
    x, y, z = queue.popleft()

    if x == (h-1) and y == (w-1):
      return visited[x][y][z]

    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      
      if 0 <= nx < h and 0 <= ny < w and graph[nx][ny] != 1 and visited[nx][ny][z] == 0:
        visited[nx][ny][z] = visited[x][y][z] + 1
        queue.append((nx,ny, z))
    if z > 0:
      for i in range(8):
        nx = x + dx1[i]
        ny = y + dy1[i]

        if 0 <= nx < h and 0 <= ny < w and graph[nx][ny] != 1 and visited[nx][ny][z-1] == 0:
          visited[nx][ny][z-1] = visited[x][y][z] + 1
          queue.append((nx,ny, z-1))
  return -1


print(bfs())

